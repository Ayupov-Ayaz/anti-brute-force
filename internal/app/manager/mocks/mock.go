// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPList is a mock of IPList interface.
type MockIPList struct {
	ctrl     *gomock.Controller
	recorder *MockIPListMockRecorder
}

// MockIPListMockRecorder is the mock recorder for MockIPList.
type MockIPListMockRecorder struct {
	mock *MockIPList
}

// NewMockIPList creates a new mock instance.
func NewMockIPList(ctrl *gomock.Controller) *MockIPList {
	mock := &MockIPList{ctrl: ctrl}
	mock.recorder = &MockIPListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPList) EXPECT() *MockIPListMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIPList) Add(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIPListMockRecorder) Add(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIPList)(nil).Add), ctx, ip)
}

// Remove mocks base method.
func (m *MockIPList) Remove(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIPListMockRecorder) Remove(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIPList)(nil).Remove), ctx, ip)
}

// MockResetter is a mock of Resetter interface.
type MockResetter struct {
	ctrl     *gomock.Controller
	recorder *MockResetterMockRecorder
}

// MockResetterMockRecorder is the mock recorder for MockResetter.
type MockResetterMockRecorder struct {
	mock *MockResetter
}

// NewMockResetter creates a new mock instance.
func NewMockResetter(ctrl *gomock.Controller) *MockResetter {
	mock := &MockResetter{ctrl: ctrl}
	mock.recorder = &MockResetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResetter) EXPECT() *MockResetterMockRecorder {
	return m.recorder
}

// Reset mocks base method.
func (m *MockResetter) Reset(ctx context.Context, login, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, login, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockResetterMockRecorder) Reset(ctx, login, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockResetter)(nil).Reset), ctx, login, ip)
}

// MockIPService is a mock of IPService interface.
type MockIPService struct {
	ctrl     *gomock.Controller
	recorder *MockIPServiceMockRecorder
}

// MockIPServiceMockRecorder is the mock recorder for MockIPService.
type MockIPServiceMockRecorder struct {
	mock *MockIPService
}

// NewMockIPService creates a new mock instance.
func NewMockIPService(ctrl *gomock.Controller) *MockIPService {
	mock := &MockIPService{ctrl: ctrl}
	mock.recorder = &MockIPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPService) EXPECT() *MockIPServiceMockRecorder {
	return m.recorder
}

// IPToUint32 mocks base method.
func (m *MockIPService) IPToUint32(ip net.IP) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPToUint32", ip)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// IPToUint32 indicates an expected call of IPToUint32.
func (mr *MockIPServiceMockRecorder) IPToUint32(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPToUint32", reflect.TypeOf((*MockIPService)(nil).IPToUint32), ip)
}

// ParseIP mocks base method.
func (m *MockIPService) ParseIP(ip string) (net.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseIP", ip)
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseIP indicates an expected call of ParseIP.
func (mr *MockIPServiceMockRecorder) ParseIP(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseIP", reflect.TypeOf((*MockIPService)(nil).ParseIP), ip)
}

// ParseMaskedIP mocks base method.
func (m *MockIPService) ParseMaskedIP(ip, mask string) (net.IP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMaskedIP", ip, mask)
	ret0, _ := ret[0].(net.IP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMaskedIP indicates an expected call of ParseMaskedIP.
func (mr *MockIPServiceMockRecorder) ParseMaskedIP(ip, mask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMaskedIP", reflect.TypeOf((*MockIPService)(nil).ParseMaskedIP), ip, mask)
}
